{"version":3,"sources":["components/Basemap.js","components/GeojsonLayer.js","components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Basemap","onChange","e","bm","currentTarget","value","props","className","this","basemap","React","Component","GeojsonLayer","state","data","console","log","info","FeatureGroup","map","f","GeoJSON","Popup","properties","name","id","url","fetchData","fetch","then","r","json","setState","features","error","L","Icon","Default","imagePath","MapComponent","lat","lng","zoom","geojsonvisible","onBMChange","onGeojsonToggle","checked","center","color","style","boxShadow","MapContainer","TileLayer","attribution","osm","hot","dark","cycle","htmlFor","type","Marker","position","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.048f9d3c.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport class Basemap extends React.Component {\r\n    onChange = (e) => {\r\n        let bm = e.currentTarget.value\r\n        if (this.props.onChange) {\r\n            this.props.onChange(bm)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"basemaps-container\"}>\r\n                <select value={this.props.basemap} onChange={this.onChange}>\r\n                    <option\r\n                        value={\"osm\"}>\r\n                        OSM</option>\r\n                    <option\r\n                        value={\"hot\"}>\r\n                        OSM HOT</option>\r\n                    <option\r\n                        value={\"dark\"}>\r\n                        DARK</option>\r\n                    <option\r\n                        value={\"cycle\"}>\r\n                        CYCLE</option>\r\n                </select>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport {FeatureGroup, GeoJSON, Popup} from \"react-leaflet\";\r\n\r\nexport class GeojsonLayer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n        }\r\n        console.log(\"constructor\")\r\n    }\r\n\r\n    render() {\r\n        console.log('render')\r\n        console.info(this.state.data)\r\n        return (\r\n            <FeatureGroup>\r\n                {this.state.data.map(f => {\r\n                    return <GeoJSON key={f.properties.id} data={f}>\r\n                        <Popup>{f.properties.name}</Popup>\r\n                    </GeoJSON>\r\n                })}\r\n            </FeatureGroup>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        this.props.url && this.fetchData(this.props.url)\r\n        console.log('did mount')\r\n    }\r\n    componentWillUnmount() {\r\n        console.log('unmount')\r\n    }\r\n    fetchData(url) {\r\n        let request = fetch(url)\r\n        request.then(r => r.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    data: data.features\r\n                })\r\n            }, error => {\r\n                console.error(error)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","import React from \"react\"\r\nimport L from \"leaflet\";\r\nimport {MapContainer, Marker, Popup, TileLayer} from \"react-leaflet\";\r\nimport './Map.css'\r\nimport {Basemap} from \"./Basemap\";\r\nimport {GeojsonLayer} from \"./GeojsonLayer\";\r\n\r\nL.Icon.Default.imagePath = 'https://unpkg.com/leaflet@1.5.0/dist/images/'\r\n\r\nclass MapComponent extends React.Component {\r\n    state = {\r\n        lat: 55.702868,\r\n        lng: 37.530865,\r\n        zoom: 10,\r\n        basemap: \"osm\",\r\n        geojsonvisible: false\r\n    }\r\n    onBMChange = (bm) => {\r\n        this.setState({\r\n            ...this.state,\r\n            basemap: bm\r\n        })\r\n    }\r\n    onGeojsonToggle = e => {\r\n        this.setState({geojsonvisible: e.currentTarget.checked})\r\n    }\r\n\r\n    render() {\r\n        let center = [this.state.lat, this.state.lng]\r\n        const baseMapsDict = {\r\n            osm: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\r\n            hot: \"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\",\r\n            dark: \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}@2x.png\",\r\n            cycle: \"https://dev.{s}.tile.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png\"\r\n        }\r\n        let color = \"\"\r\n        if (this.state.basemap === \"osm\") color = \"white\"\r\n        if (this.state.basemap === \"hot\") color = \"deeppink\"\r\n        if (this.state.basemap === \"dark\") color = \"black\"\r\n        if (this.state.basemap === \"cycle\") color = \"yellow\"\r\n        const style = {\r\n            boxShadow: `0 0 15px ${color}`\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <MapContainer style={style} zoom={this.state.zoom} center={center}>\r\n                    <TileLayer\r\n                        attribution=\"&amp;copy <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors\"\r\n                        url={baseMapsDict[this.state.basemap]}\r\n                    />\r\n                    <Basemap basemap={this.state.basemap} onChange={this.onBMChange}/>\r\n                    <div className={'geojson-toggle'}>\r\n                        <label htmlFor={'layertoggle'}>Toggle Geojson</label>\r\n                        <input type=\"checkbox\" name={'layertoggle'} id={'layertoggle'}\r\n                               value={this.state.geojsonvisible} onChange={this.onGeojsonToggle}/>\r\n                    </div>\r\n                    {this.state.geojsonvisible && <GeojsonLayer url={'geojson.json'}/>}\r\n                    <Marker position={center}>\r\n                        <Popup>Выбрана тема {this.state.basemap}</Popup>\r\n                    </Marker>\r\n                </MapContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapComponent","import React from 'react'\nimport './App.css';\nimport MapComponent from \"./components/Map\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <MapComponent/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}